/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_DEPLOYED_PROGRAM_DISCRIMINATOR = new Uint8Array([
  172, 130, 250, 99, 100, 127, 91, 77,
]);

export function getSetDeployedProgramDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_DEPLOYED_PROGRAM_DISCRIMINATOR
  );
}

export type SetDeployedProgramInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountLoan extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountLoan extends string
        ? WritableAccount<TAccountLoan>
        : TAccountLoan,
      ...TRemainingAccounts,
    ]
  >;

export type SetDeployedProgramInstructionData = {
  discriminator: ReadonlyUint8Array;
  loanId: bigint;
  programPubkey: Address;
};

export type SetDeployedProgramInstructionDataArgs = {
  loanId: number | bigint;
  programPubkey: Address;
};

export function getSetDeployedProgramInstructionDataEncoder(): FixedSizeEncoder<SetDeployedProgramInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['loanId', getU64Encoder()],
      ['programPubkey', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_DEPLOYED_PROGRAM_DISCRIMINATOR })
  );
}

export function getSetDeployedProgramInstructionDataDecoder(): FixedSizeDecoder<SetDeployedProgramInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['loanId', getU64Decoder()],
    ['programPubkey', getAddressDecoder()],
  ]);
}

export function getSetDeployedProgramInstructionDataCodec(): FixedSizeCodec<
  SetDeployedProgramInstructionDataArgs,
  SetDeployedProgramInstructionData
> {
  return combineCodec(
    getSetDeployedProgramInstructionDataEncoder(),
    getSetDeployedProgramInstructionDataDecoder()
  );
}

export type SetDeployedProgramInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  loanId: SetDeployedProgramInstructionDataArgs['loanId'];
  programPubkey: SetDeployedProgramInstructionDataArgs['programPubkey'];
};

export function getSetDeployedProgramInstruction<
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: SetDeployedProgramInput<
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan
  >,
  config?: { programAddress?: TProgramAddress }
): SetDeployedProgramInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountProtocolConfig,
  TAccountLoan
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
    ],
    data: getSetDeployedProgramInstructionDataEncoder().encode(
      args as SetDeployedProgramInstructionDataArgs
    ),
    programAddress,
  } as SetDeployedProgramInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan
  >);
}

export type ParsedSetDeployedProgramInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    protocolConfig: TAccountMetas[1];
    loan: TAccountMetas[2];
  };
  data: SetDeployedProgramInstructionData;
};

export function parseSetDeployedProgramInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetDeployedProgramInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      protocolConfig: getNextAccount(),
      loan: getNextAccount(),
    },
    data: getSetDeployedProgramInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
