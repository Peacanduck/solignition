/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RETURN_RECLAIMED_SOL_DISCRIMINATOR = new Uint8Array([
  220, 56, 188, 60, 115, 212, 233, 113,
]);

export function getReturnReclaimedSolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RETURN_RECLAIMED_SOL_DISCRIMINATOR
  );
}

export type ReturnReclaimedSolInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountCaller extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountLoan extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountDeployerPda extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCaller extends string
        ? ReadonlySignerAccount<TAccountCaller> &
            AccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountProtocolConfig extends string
        ? ReadonlyAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountLoan extends string
        ? WritableAccount<TAccountLoan>
        : TAccountLoan,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountDeployerPda extends string
        ? WritableAccount<TAccountDeployerPda>
        : TAccountDeployerPda,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ReturnReclaimedSolInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type ReturnReclaimedSolInstructionDataArgs = { amount: number | bigint };

export function getReturnReclaimedSolInstructionDataEncoder(): FixedSizeEncoder<ReturnReclaimedSolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: RETURN_RECLAIMED_SOL_DISCRIMINATOR })
  );
}

export function getReturnReclaimedSolInstructionDataDecoder(): FixedSizeDecoder<ReturnReclaimedSolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getReturnReclaimedSolInstructionDataCodec(): FixedSizeCodec<
  ReturnReclaimedSolInstructionDataArgs,
  ReturnReclaimedSolInstructionData
> {
  return combineCodec(
    getReturnReclaimedSolInstructionDataEncoder(),
    getReturnReclaimedSolInstructionDataDecoder()
  );
}

export type ReturnReclaimedSolAsyncInput<
  TAccountCaller extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
  TAccountVault extends string = string,
  TAccountDeployerPda extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  caller: TransactionSigner<TAccountCaller>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  vault?: Address<TAccountVault>;
  deployerPda: Address<TAccountDeployerPda>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: ReturnReclaimedSolInstructionDataArgs['amount'];
};

export async function getReturnReclaimedSolInstructionAsync<
  TAccountCaller extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TAccountVault extends string,
  TAccountDeployerPda extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: ReturnReclaimedSolAsyncInput<
    TAccountCaller,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountVault,
    TAccountDeployerPda,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ReturnReclaimedSolInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountVault,
    TAccountDeployerPda,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: false },
    loan: { value: input.loan ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    deployerPda: { value: input.deployerPda ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.deployerPda),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getReturnReclaimedSolInstructionDataEncoder().encode(
      args as ReturnReclaimedSolInstructionDataArgs
    ),
    programAddress,
  } as ReturnReclaimedSolInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountVault,
    TAccountDeployerPda,
    TAccountSystemProgram
  >);
}

export type ReturnReclaimedSolInput<
  TAccountCaller extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
  TAccountVault extends string = string,
  TAccountDeployerPda extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  caller: TransactionSigner<TAccountCaller>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  vault: Address<TAccountVault>;
  deployerPda: Address<TAccountDeployerPda>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: ReturnReclaimedSolInstructionDataArgs['amount'];
};

export function getReturnReclaimedSolInstruction<
  TAccountCaller extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TAccountVault extends string,
  TAccountDeployerPda extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: ReturnReclaimedSolInput<
    TAccountCaller,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountVault,
    TAccountDeployerPda,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ReturnReclaimedSolInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountProtocolConfig,
  TAccountLoan,
  TAccountVault,
  TAccountDeployerPda,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: false },
    loan: { value: input.loan ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    deployerPda: { value: input.deployerPda ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.deployerPda),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getReturnReclaimedSolInstructionDataEncoder().encode(
      args as ReturnReclaimedSolInstructionDataArgs
    ),
    programAddress,
  } as ReturnReclaimedSolInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountVault,
    TAccountDeployerPda,
    TAccountSystemProgram
  >);
}

export type ParsedReturnReclaimedSolInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    caller: TAccountMetas[0];
    protocolConfig: TAccountMetas[1];
    loan: TAccountMetas[2];
    vault: TAccountMetas[3];
    deployerPda: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: ReturnReclaimedSolInstructionData;
};

export function parseReturnReclaimedSolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReturnReclaimedSolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      protocolConfig: getNextAccount(),
      loan: getNextAccount(),
      vault: getNextAccount(),
      deployerPda: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReturnReclaimedSolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
