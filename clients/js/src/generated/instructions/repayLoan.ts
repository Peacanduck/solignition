/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REPAY_LOAN_DISCRIMINATOR = new Uint8Array([
  224, 93, 144, 77, 61, 17, 137, 54,
]);

export function getRepayLoanDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REPAY_LOAN_DISCRIMINATOR);
}

export type RepayLoanInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountBorrower extends string | AccountMeta<string> = string,
  TAccountLoan extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAuthorityPda extends string | AccountMeta<string> = string,
  TAccountProgramData extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBorrower extends string
        ? WritableSignerAccount<TAccountBorrower> &
            AccountSignerMeta<TAccountBorrower>
        : TAccountBorrower,
      TAccountLoan extends string
        ? WritableAccount<TAccountLoan>
        : TAccountLoan,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAuthorityPda extends string
        ? ReadonlyAccount<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      TAccountProgramData extends string
        ? ReadonlyAccount<TAccountProgramData>
        : TAccountProgramData,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RepayLoanInstructionData = { discriminator: ReadonlyUint8Array };

export type RepayLoanInstructionDataArgs = {};

export function getRepayLoanInstructionDataEncoder(): FixedSizeEncoder<RepayLoanInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REPAY_LOAN_DISCRIMINATOR })
  );
}

export function getRepayLoanInstructionDataDecoder(): FixedSizeDecoder<RepayLoanInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRepayLoanInstructionDataCodec(): FixedSizeCodec<
  RepayLoanInstructionDataArgs,
  RepayLoanInstructionData
> {
  return combineCodec(
    getRepayLoanInstructionDataEncoder(),
    getRepayLoanInstructionDataDecoder()
  );
}

export type RepayLoanAsyncInput<
  TAccountBorrower extends string = string,
  TAccountLoan extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountVault extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountProgramData extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  borrower: TransactionSigner<TAccountBorrower>;
  loan: Address<TAccountLoan>;
  protocolConfig: Address<TAccountProtocolConfig>;
  vault?: Address<TAccountVault>;
  authorityPda?: Address<TAccountAuthorityPda>;
  programData: Address<TAccountProgramData>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getRepayLoanInstructionAsync<
  TAccountBorrower extends string,
  TAccountLoan extends string,
  TAccountProtocolConfig extends string,
  TAccountVault extends string,
  TAccountAuthorityPda extends string,
  TAccountProgramData extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: RepayLoanAsyncInput<
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountProgramData,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RepayLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountProgramData,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    borrower: { value: input.borrower ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
    programData: { value: input.programData ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.authorityPda.value) {
    accounts.authorityPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.borrower),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRepayLoanInstructionDataEncoder().encode({}),
    programAddress,
  } as RepayLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountProgramData,
    TAccountSystemProgram
  >);
}

export type RepayLoanInput<
  TAccountBorrower extends string = string,
  TAccountLoan extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountVault extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountProgramData extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  borrower: TransactionSigner<TAccountBorrower>;
  loan: Address<TAccountLoan>;
  protocolConfig: Address<TAccountProtocolConfig>;
  vault: Address<TAccountVault>;
  authorityPda: Address<TAccountAuthorityPda>;
  programData: Address<TAccountProgramData>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getRepayLoanInstruction<
  TAccountBorrower extends string,
  TAccountLoan extends string,
  TAccountProtocolConfig extends string,
  TAccountVault extends string,
  TAccountAuthorityPda extends string,
  TAccountProgramData extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: RepayLoanInput<
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountProgramData,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RepayLoanInstruction<
  TProgramAddress,
  TAccountBorrower,
  TAccountLoan,
  TAccountProtocolConfig,
  TAccountVault,
  TAccountAuthorityPda,
  TAccountProgramData,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    borrower: { value: input.borrower ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
    programData: { value: input.programData ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.borrower),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRepayLoanInstructionDataEncoder().encode({}),
    programAddress,
  } as RepayLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountProgramData,
    TAccountSystemProgram
  >);
}

export type ParsedRepayLoanInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    borrower: TAccountMetas[0];
    loan: TAccountMetas[1];
    protocolConfig: TAccountMetas[2];
    vault: TAccountMetas[3];
    authorityPda: TAccountMetas[4];
    programData: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: RepayLoanInstructionData;
};

export function parseRepayLoanInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRepayLoanInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      borrower: getNextAccount(),
      loan: getNextAccount(),
      protocolConfig: getNextAccount(),
      vault: getNextAccount(),
      authorityPda: getNextAccount(),
      programData: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRepayLoanInstructionDataDecoder().decode(instruction.data),
  };
}
