/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REQUEST_LOAN_DISCRIMINATOR = new Uint8Array([
  120, 2, 7, 7, 1, 219, 235, 187,
]);

export function getRequestLoanDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REQUEST_LOAN_DISCRIMINATOR
  );
}

export type RequestLoanInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountBorrower extends string | AccountMeta<string> = string,
  TAccountLoan extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAuthorityPda extends string | AccountMeta<string> = string,
  TAccountAdminPda extends string | AccountMeta<string> = string,
  TAccountDeployerPda extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBorrower extends string
        ? WritableSignerAccount<TAccountBorrower> &
            AccountSignerMeta<TAccountBorrower>
        : TAccountBorrower,
      TAccountLoan extends string
        ? WritableAccount<TAccountLoan>
        : TAccountLoan,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAuthorityPda extends string
        ? ReadonlyAccount<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      TAccountAdminPda extends string
        ? WritableAccount<TAccountAdminPda>
        : TAccountAdminPda,
      TAccountDeployerPda extends string
        ? WritableAccount<TAccountDeployerPda>
        : TAccountDeployerPda,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RequestLoanInstructionData = {
  discriminator: ReadonlyUint8Array;
  loanId: bigint;
  principal: bigint;
  duration: bigint;
  interestRateBps: number;
  adminFeeBps: number;
};

export type RequestLoanInstructionDataArgs = {
  loanId: number | bigint;
  principal: number | bigint;
  duration: number | bigint;
  interestRateBps: number;
  adminFeeBps: number;
};

export function getRequestLoanInstructionDataEncoder(): FixedSizeEncoder<RequestLoanInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['loanId', getU64Encoder()],
      ['principal', getU64Encoder()],
      ['duration', getI64Encoder()],
      ['interestRateBps', getU16Encoder()],
      ['adminFeeBps', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REQUEST_LOAN_DISCRIMINATOR })
  );
}

export function getRequestLoanInstructionDataDecoder(): FixedSizeDecoder<RequestLoanInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['loanId', getU64Decoder()],
    ['principal', getU64Decoder()],
    ['duration', getI64Decoder()],
    ['interestRateBps', getU16Decoder()],
    ['adminFeeBps', getU16Decoder()],
  ]);
}

export function getRequestLoanInstructionDataCodec(): FixedSizeCodec<
  RequestLoanInstructionDataArgs,
  RequestLoanInstructionData
> {
  return combineCodec(
    getRequestLoanInstructionDataEncoder(),
    getRequestLoanInstructionDataDecoder()
  );
}

export type RequestLoanAsyncInput<
  TAccountBorrower extends string = string,
  TAccountLoan extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountVault extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountAdminPda extends string = string,
  TAccountDeployerPda extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  borrower: TransactionSigner<TAccountBorrower>;
  loan?: Address<TAccountLoan>;
  protocolConfig: Address<TAccountProtocolConfig>;
  vault?: Address<TAccountVault>;
  authorityPda?: Address<TAccountAuthorityPda>;
  adminPda?: Address<TAccountAdminPda>;
  deployerPda: Address<TAccountDeployerPda>;
  systemProgram?: Address<TAccountSystemProgram>;
  loanId: RequestLoanInstructionDataArgs['loanId'];
  principal: RequestLoanInstructionDataArgs['principal'];
  duration: RequestLoanInstructionDataArgs['duration'];
  interestRateBps: RequestLoanInstructionDataArgs['interestRateBps'];
  adminFeeBps: RequestLoanInstructionDataArgs['adminFeeBps'];
};

export async function getRequestLoanInstructionAsync<
  TAccountBorrower extends string,
  TAccountLoan extends string,
  TAccountProtocolConfig extends string,
  TAccountVault extends string,
  TAccountAuthorityPda extends string,
  TAccountAdminPda extends string,
  TAccountDeployerPda extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: RequestLoanAsyncInput<
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountAdminPda,
    TAccountDeployerPda,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RequestLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountAdminPda,
    TAccountDeployerPda,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    borrower: { value: input.borrower ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
    adminPda: { value: input.adminPda ?? null, isWritable: true },
    deployerPda: { value: input.deployerPda ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.loan.value) {
    accounts.loan.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([108, 111, 97, 110])),
        getU64Encoder().encode(expectSome(args.loanId)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.authorityPda.value) {
    accounts.authorityPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.adminPda.value) {
    accounts.adminPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 100, 109, 105, 110])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.borrower),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.adminPda),
      getAccountMeta(accounts.deployerPda),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRequestLoanInstructionDataEncoder().encode(
      args as RequestLoanInstructionDataArgs
    ),
    programAddress,
  } as RequestLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountAdminPda,
    TAccountDeployerPda,
    TAccountSystemProgram
  >);
}

export type RequestLoanInput<
  TAccountBorrower extends string = string,
  TAccountLoan extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountVault extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountAdminPda extends string = string,
  TAccountDeployerPda extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  borrower: TransactionSigner<TAccountBorrower>;
  loan: Address<TAccountLoan>;
  protocolConfig: Address<TAccountProtocolConfig>;
  vault: Address<TAccountVault>;
  authorityPda: Address<TAccountAuthorityPda>;
  adminPda: Address<TAccountAdminPda>;
  deployerPda: Address<TAccountDeployerPda>;
  systemProgram?: Address<TAccountSystemProgram>;
  loanId: RequestLoanInstructionDataArgs['loanId'];
  principal: RequestLoanInstructionDataArgs['principal'];
  duration: RequestLoanInstructionDataArgs['duration'];
  interestRateBps: RequestLoanInstructionDataArgs['interestRateBps'];
  adminFeeBps: RequestLoanInstructionDataArgs['adminFeeBps'];
};

export function getRequestLoanInstruction<
  TAccountBorrower extends string,
  TAccountLoan extends string,
  TAccountProtocolConfig extends string,
  TAccountVault extends string,
  TAccountAuthorityPda extends string,
  TAccountAdminPda extends string,
  TAccountDeployerPda extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: RequestLoanInput<
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountAdminPda,
    TAccountDeployerPda,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RequestLoanInstruction<
  TProgramAddress,
  TAccountBorrower,
  TAccountLoan,
  TAccountProtocolConfig,
  TAccountVault,
  TAccountAuthorityPda,
  TAccountAdminPda,
  TAccountDeployerPda,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    borrower: { value: input.borrower ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
    adminPda: { value: input.adminPda ?? null, isWritable: true },
    deployerPda: { value: input.deployerPda ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.borrower),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.adminPda),
      getAccountMeta(accounts.deployerPda),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRequestLoanInstructionDataEncoder().encode(
      args as RequestLoanInstructionDataArgs
    ),
    programAddress,
  } as RequestLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoan,
    TAccountProtocolConfig,
    TAccountVault,
    TAccountAuthorityPda,
    TAccountAdminPda,
    TAccountDeployerPda,
    TAccountSystemProgram
  >);
}

export type ParsedRequestLoanInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    borrower: TAccountMetas[0];
    loan: TAccountMetas[1];
    protocolConfig: TAccountMetas[2];
    vault: TAccountMetas[3];
    authorityPda: TAccountMetas[4];
    adminPda: TAccountMetas[5];
    deployerPda: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: RequestLoanInstructionData;
};

export function parseRequestLoanInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRequestLoanInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      borrower: getNextAccount(),
      loan: getNextAccount(),
      protocolConfig: getNextAccount(),
      vault: getNextAccount(),
      authorityPda: getNextAccount(),
      adminPda: getNextAccount(),
      deployerPda: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRequestLoanInstructionDataDecoder().decode(instruction.data),
  };
}
