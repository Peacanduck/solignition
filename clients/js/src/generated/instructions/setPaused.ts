/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_PAUSED_DISCRIMINATOR = new Uint8Array([
  91, 60, 125, 192, 176, 225, 166, 218,
]);

export function getSetPausedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_PAUSED_DISCRIMINATOR);
}

export type SetPausedInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      ...TRemainingAccounts,
    ]
  >;

export type SetPausedInstructionData = {
  discriminator: ReadonlyUint8Array;
  isPaused: boolean;
};

export type SetPausedInstructionDataArgs = { isPaused: boolean };

export function getSetPausedInstructionDataEncoder(): FixedSizeEncoder<SetPausedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['isPaused', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_PAUSED_DISCRIMINATOR })
  );
}

export function getSetPausedInstructionDataDecoder(): FixedSizeDecoder<SetPausedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['isPaused', getBooleanDecoder()],
  ]);
}

export function getSetPausedInstructionDataCodec(): FixedSizeCodec<
  SetPausedInstructionDataArgs,
  SetPausedInstructionData
> {
  return combineCodec(
    getSetPausedInstructionDataEncoder(),
    getSetPausedInstructionDataDecoder()
  );
}

export type SetPausedInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  protocolConfig: Address<TAccountProtocolConfig>;
  isPaused: SetPausedInstructionDataArgs['isPaused'];
};

export function getSetPausedInstruction<
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: SetPausedInput<TAccountAdmin, TAccountProtocolConfig>,
  config?: { programAddress?: TProgramAddress }
): SetPausedInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountProtocolConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
    ],
    data: getSetPausedInstructionDataEncoder().encode(
      args as SetPausedInstructionDataArgs
    ),
    programAddress,
  } as SetPausedInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig
  >);
}

export type ParsedSetPausedInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    protocolConfig: TAccountMetas[1];
  };
  data: SetPausedInstructionData;
};

export function parseSetPausedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetPausedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { admin: getNextAccount(), protocolConfig: getNextAccount() },
    data: getSetPausedInstructionDataDecoder().decode(instruction.data),
  };
}
