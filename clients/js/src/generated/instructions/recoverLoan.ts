/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RECOVER_LOAN_DISCRIMINATOR = new Uint8Array([
  16, 58, 190, 149, 240, 136, 240, 85,
]);

export function getRecoverLoanDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RECOVER_LOAN_DISCRIMINATOR
  );
}

export type RecoverLoanInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountLoan extends string | AccountMeta<string> = string,
  TAccountAdminPda extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountLoan extends string
        ? WritableAccount<TAccountLoan>
        : TAccountLoan,
      TAccountAdminPda extends string
        ? WritableAccount<TAccountAdminPda>
        : TAccountAdminPda,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RecoverLoanInstructionData = { discriminator: ReadonlyUint8Array };

export type RecoverLoanInstructionDataArgs = {};

export function getRecoverLoanInstructionDataEncoder(): FixedSizeEncoder<RecoverLoanInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RECOVER_LOAN_DISCRIMINATOR })
  );
}

export function getRecoverLoanInstructionDataDecoder(): FixedSizeDecoder<RecoverLoanInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRecoverLoanInstructionDataCodec(): FixedSizeCodec<
  RecoverLoanInstructionDataArgs,
  RecoverLoanInstructionData
> {
  return combineCodec(
    getRecoverLoanInstructionDataEncoder(),
    getRecoverLoanInstructionDataDecoder()
  );
}

export type RecoverLoanAsyncInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
  TAccountAdminPda extends string = string,
  TAccountTreasury extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  adminPda?: Address<TAccountAdminPda>;
  treasury: Address<TAccountTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getRecoverLoanInstructionAsync<
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TAccountAdminPda extends string,
  TAccountTreasury extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: RecoverLoanAsyncInput<
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAdminPda,
    TAccountTreasury,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RecoverLoanInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAdminPda,
    TAccountTreasury,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
    adminPda: { value: input.adminPda ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.adminPda.value) {
    accounts.adminPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 100, 109, 105, 110])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.adminPda),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRecoverLoanInstructionDataEncoder().encode({}),
    programAddress,
  } as RecoverLoanInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAdminPda,
    TAccountTreasury,
    TAccountSystemProgram
  >);
}

export type RecoverLoanInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
  TAccountAdminPda extends string = string,
  TAccountTreasury extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  adminPda: Address<TAccountAdminPda>;
  treasury: Address<TAccountTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getRecoverLoanInstruction<
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TAccountAdminPda extends string,
  TAccountTreasury extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: RecoverLoanInput<
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAdminPda,
    TAccountTreasury,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RecoverLoanInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountProtocolConfig,
  TAccountLoan,
  TAccountAdminPda,
  TAccountTreasury,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    loan: { value: input.loan ?? null, isWritable: true },
    adminPda: { value: input.adminPda ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.adminPda),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRecoverLoanInstructionDataEncoder().encode({}),
    programAddress,
  } as RecoverLoanInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAdminPda,
    TAccountTreasury,
    TAccountSystemProgram
  >);
}

export type ParsedRecoverLoanInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    protocolConfig: TAccountMetas[1];
    loan: TAccountMetas[2];
    adminPda: TAccountMetas[3];
    treasury: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: RecoverLoanInstructionData;
};

export function parseRecoverLoanInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRecoverLoanInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      protocolConfig: getNextAccount(),
      loan: getNextAccount(),
      adminPda: getNextAccount(),
      treasury: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRecoverLoanInstructionDataDecoder().decode(instruction.data),
  };
}
