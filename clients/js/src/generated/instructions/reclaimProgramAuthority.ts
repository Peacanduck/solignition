/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RECLAIM_PROGRAM_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  59, 60, 162, 122, 3, 250, 57, 139,
]);

export function getReclaimProgramAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RECLAIM_PROGRAM_AUTHORITY_DISCRIMINATOR
  );
}

export type ReclaimProgramAuthorityInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountLoan extends string | AccountMeta<string> = string,
  TAccountAuthorityPda extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfig extends string
        ? ReadonlyAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountLoan extends string
        ? ReadonlyAccount<TAccountLoan>
        : TAccountLoan,
      TAccountAuthorityPda extends string
        ? ReadonlyAccount<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      ...TRemainingAccounts,
    ]
  >;

export type ReclaimProgramAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ReclaimProgramAuthorityInstructionDataArgs = {};

export function getReclaimProgramAuthorityInstructionDataEncoder(): FixedSizeEncoder<ReclaimProgramAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: RECLAIM_PROGRAM_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getReclaimProgramAuthorityInstructionDataDecoder(): FixedSizeDecoder<ReclaimProgramAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReclaimProgramAuthorityInstructionDataCodec(): FixedSizeCodec<
  ReclaimProgramAuthorityInstructionDataArgs,
  ReclaimProgramAuthorityInstructionData
> {
  return combineCodec(
    getReclaimProgramAuthorityInstructionDataEncoder(),
    getReclaimProgramAuthorityInstructionDataDecoder()
  );
}

export type ReclaimProgramAuthorityAsyncInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
  TAccountAuthorityPda extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  authorityPda?: Address<TAccountAuthorityPda>;
};

export async function getReclaimProgramAuthorityInstructionAsync<
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TAccountAuthorityPda extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: ReclaimProgramAuthorityAsyncInput<
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAuthorityPda
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ReclaimProgramAuthorityInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAuthorityPda
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: false },
    loan: { value: input.loan ?? null, isWritable: false },
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.authorityPda.value) {
    accounts.authorityPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.authorityPda),
    ],
    data: getReclaimProgramAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as ReclaimProgramAuthorityInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAuthorityPda
  >);
}

export type ReclaimProgramAuthorityInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountLoan extends string = string,
  TAccountAuthorityPda extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  protocolConfig: Address<TAccountProtocolConfig>;
  loan: Address<TAccountLoan>;
  authorityPda: Address<TAccountAuthorityPda>;
};

export function getReclaimProgramAuthorityInstruction<
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TAccountLoan extends string,
  TAccountAuthorityPda extends string,
  TProgramAddress extends Address = typeof SOLIGNITION_PROGRAM_ADDRESS,
>(
  input: ReclaimProgramAuthorityInput<
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAuthorityPda
  >,
  config?: { programAddress?: TProgramAddress }
): ReclaimProgramAuthorityInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountProtocolConfig,
  TAccountLoan,
  TAccountAuthorityPda
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLIGNITION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: false },
    loan: { value: input.loan ?? null, isWritable: false },
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.loan),
      getAccountMeta(accounts.authorityPda),
    ],
    data: getReclaimProgramAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as ReclaimProgramAuthorityInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfig,
    TAccountLoan,
    TAccountAuthorityPda
  >);
}

export type ParsedReclaimProgramAuthorityInstruction<
  TProgram extends string = typeof SOLIGNITION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    protocolConfig: TAccountMetas[1];
    loan: TAccountMetas[2];
    authorityPda: TAccountMetas[3];
  };
  data: ReclaimProgramAuthorityInstructionData;
};

export function parseReclaimProgramAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReclaimProgramAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      protocolConfig: getNextAccount(),
      loan: getNextAccount(),
      authorityPda: getNextAccount(),
    },
    data: getReclaimProgramAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
