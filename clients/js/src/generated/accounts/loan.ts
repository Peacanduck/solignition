/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLoanStateDecoder,
  getLoanStateEncoder,
  type LoanState,
  type LoanStateArgs,
} from '../types';

export const LOAN_DISCRIMINATOR = new Uint8Array([
  20, 195, 70, 117, 165, 227, 182, 1,
]);

export function getLoanDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOAN_DISCRIMINATOR);
}

export type Loan = {
  discriminator: ReadonlyUint8Array;
  loanId: bigint;
  borrower: Address;
  programPubkey: Address;
  principal: bigint;
  duration: bigint;
  interestRateBps: number;
  adminFeeBps: number;
  adminFeePaid: bigint;
  startTs: bigint;
  state: LoanState;
  authorityPda: Address;
  repaidTs: Option<bigint>;
  recoveredTs: Option<bigint>;
  interestPaid: Option<bigint>;
  reclaimedAmount: Option<bigint>;
  reclaimedTs: Option<bigint>;
};

export type LoanArgs = {
  loanId: number | bigint;
  borrower: Address;
  programPubkey: Address;
  principal: number | bigint;
  duration: number | bigint;
  interestRateBps: number;
  adminFeeBps: number;
  adminFeePaid: number | bigint;
  startTs: number | bigint;
  state: LoanStateArgs;
  authorityPda: Address;
  repaidTs: OptionOrNullable<number | bigint>;
  recoveredTs: OptionOrNullable<number | bigint>;
  interestPaid: OptionOrNullable<number | bigint>;
  reclaimedAmount: OptionOrNullable<number | bigint>;
  reclaimedTs: OptionOrNullable<number | bigint>;
};

export function getLoanEncoder(): Encoder<LoanArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['loanId', getU64Encoder()],
      ['borrower', getAddressEncoder()],
      ['programPubkey', getAddressEncoder()],
      ['principal', getU64Encoder()],
      ['duration', getI64Encoder()],
      ['interestRateBps', getU16Encoder()],
      ['adminFeeBps', getU16Encoder()],
      ['adminFeePaid', getU64Encoder()],
      ['startTs', getI64Encoder()],
      ['state', getLoanStateEncoder()],
      ['authorityPda', getAddressEncoder()],
      ['repaidTs', getOptionEncoder(getI64Encoder())],
      ['recoveredTs', getOptionEncoder(getI64Encoder())],
      ['interestPaid', getOptionEncoder(getU64Encoder())],
      ['reclaimedAmount', getOptionEncoder(getU64Encoder())],
      ['reclaimedTs', getOptionEncoder(getI64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: LOAN_DISCRIMINATOR })
  );
}

export function getLoanDecoder(): Decoder<Loan> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['loanId', getU64Decoder()],
    ['borrower', getAddressDecoder()],
    ['programPubkey', getAddressDecoder()],
    ['principal', getU64Decoder()],
    ['duration', getI64Decoder()],
    ['interestRateBps', getU16Decoder()],
    ['adminFeeBps', getU16Decoder()],
    ['adminFeePaid', getU64Decoder()],
    ['startTs', getI64Decoder()],
    ['state', getLoanStateDecoder()],
    ['authorityPda', getAddressDecoder()],
    ['repaidTs', getOptionDecoder(getI64Decoder())],
    ['recoveredTs', getOptionDecoder(getI64Decoder())],
    ['interestPaid', getOptionDecoder(getU64Decoder())],
    ['reclaimedAmount', getOptionDecoder(getU64Decoder())],
    ['reclaimedTs', getOptionDecoder(getI64Decoder())],
  ]);
}

export function getLoanCodec(): Codec<LoanArgs, Loan> {
  return combineCodec(getLoanEncoder(), getLoanDecoder());
}

export function decodeLoan<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Loan, TAddress>;
export function decodeLoan<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Loan, TAddress>;
export function decodeLoan<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Loan, TAddress> | MaybeAccount<Loan, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLoanDecoder()
  );
}

export async function fetchLoan<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Loan, TAddress>> {
  const maybeAccount = await fetchMaybeLoan(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLoan<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Loan, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLoan(maybeAccount);
}

export async function fetchAllLoan(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Loan>[]> {
  const maybeAccounts = await fetchAllMaybeLoan(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLoan(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Loan>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeLoan(maybeAccount));
}
