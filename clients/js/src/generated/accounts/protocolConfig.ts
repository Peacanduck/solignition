/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PROTOCOL_CONFIG_DISCRIMINATOR = new Uint8Array([
  207, 91, 250, 28, 152, 179, 215, 209,
]);

export function getProtocolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROTOCOL_CONFIG_DISCRIMINATOR
  );
}

export type ProtocolConfig = {
  discriminator: ReadonlyUint8Array;
  admin: Address;
  treasury: Address;
  deployer: Address;
  adminFeeSplitBps: number;
  defaultInterestRateBps: number;
  defaultAdminFeeBps: number;
  totalDeposits: bigint;
  totalLoansOutstanding: bigint;
  totalYieldDistributed: bigint;
  loanCounter: bigint;
  isPaused: boolean;
};

export type ProtocolConfigArgs = {
  admin: Address;
  treasury: Address;
  deployer: Address;
  adminFeeSplitBps: number;
  defaultInterestRateBps: number;
  defaultAdminFeeBps: number;
  totalDeposits: number | bigint;
  totalLoansOutstanding: number | bigint;
  totalYieldDistributed: number | bigint;
  loanCounter: number | bigint;
  isPaused: boolean;
};

export function getProtocolConfigEncoder(): FixedSizeEncoder<ProtocolConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['treasury', getAddressEncoder()],
      ['deployer', getAddressEncoder()],
      ['adminFeeSplitBps', getU16Encoder()],
      ['defaultInterestRateBps', getU16Encoder()],
      ['defaultAdminFeeBps', getU16Encoder()],
      ['totalDeposits', getU64Encoder()],
      ['totalLoansOutstanding', getU64Encoder()],
      ['totalYieldDistributed', getU64Encoder()],
      ['loanCounter', getU64Encoder()],
      ['isPaused', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PROTOCOL_CONFIG_DISCRIMINATOR })
  );
}

export function getProtocolConfigDecoder(): FixedSizeDecoder<ProtocolConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['treasury', getAddressDecoder()],
    ['deployer', getAddressDecoder()],
    ['adminFeeSplitBps', getU16Decoder()],
    ['defaultInterestRateBps', getU16Decoder()],
    ['defaultAdminFeeBps', getU16Decoder()],
    ['totalDeposits', getU64Decoder()],
    ['totalLoansOutstanding', getU64Decoder()],
    ['totalYieldDistributed', getU64Decoder()],
    ['loanCounter', getU64Decoder()],
    ['isPaused', getBooleanDecoder()],
  ]);
}

export function getProtocolConfigCodec(): FixedSizeCodec<
  ProtocolConfigArgs,
  ProtocolConfig
> {
  return combineCodec(getProtocolConfigEncoder(), getProtocolConfigDecoder());
}

export function decodeProtocolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProtocolConfig, TAddress>;
export function decodeProtocolConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProtocolConfig, TAddress>;
export function decodeProtocolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProtocolConfig, TAddress> | MaybeAccount<ProtocolConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProtocolConfigDecoder()
  );
}

export async function fetchProtocolConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProtocolConfig, TAddress>> {
  const maybeAccount = await fetchMaybeProtocolConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProtocolConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProtocolConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProtocolConfig(maybeAccount);
}

export async function fetchAllProtocolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProtocolConfig>[]> {
  const maybeAccounts = await fetchAllMaybeProtocolConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProtocolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProtocolConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProtocolConfig(maybeAccount)
  );
}

export function getProtocolConfigSize(): number {
  return 143;
}
