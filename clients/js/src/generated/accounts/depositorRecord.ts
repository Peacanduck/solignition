/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const DEPOSITOR_RECORD_DISCRIMINATOR = new Uint8Array([
  120, 180, 8, 71, 198, 212, 93, 187,
]);

export function getDepositorRecordDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSITOR_RECORD_DISCRIMINATOR
  );
}

export type DepositorRecord = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  depositedAmount: bigint;
  shareAmount: bigint;
  lastUpdateTs: bigint;
};

export type DepositorRecordArgs = {
  owner: Address;
  depositedAmount: number | bigint;
  shareAmount: number | bigint;
  lastUpdateTs: number | bigint;
};

export function getDepositorRecordEncoder(): FixedSizeEncoder<DepositorRecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['depositedAmount', getU64Encoder()],
      ['shareAmount', getU64Encoder()],
      ['lastUpdateTs', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSITOR_RECORD_DISCRIMINATOR })
  );
}

export function getDepositorRecordDecoder(): FixedSizeDecoder<DepositorRecord> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['depositedAmount', getU64Decoder()],
    ['shareAmount', getU64Decoder()],
    ['lastUpdateTs', getI64Decoder()],
  ]);
}

export function getDepositorRecordCodec(): FixedSizeCodec<
  DepositorRecordArgs,
  DepositorRecord
> {
  return combineCodec(getDepositorRecordEncoder(), getDepositorRecordDecoder());
}

export function decodeDepositorRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DepositorRecord, TAddress>;
export function decodeDepositorRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DepositorRecord, TAddress>;
export function decodeDepositorRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<DepositorRecord, TAddress>
  | MaybeAccount<DepositorRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDepositorRecordDecoder()
  );
}

export async function fetchDepositorRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DepositorRecord, TAddress>> {
  const maybeAccount = await fetchMaybeDepositorRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDepositorRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DepositorRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDepositorRecord(maybeAccount);
}

export async function fetchAllDepositorRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DepositorRecord>[]> {
  const maybeAccounts = await fetchAllMaybeDepositorRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDepositorRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DepositorRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDepositorRecord(maybeAccount)
  );
}

export function getDepositorRecordSize(): number {
  return 64;
}
