/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedDepositInstruction,
  type ParsedInitializeInstruction,
  type ParsedReclaimProgramAuthorityInstruction,
  type ParsedRecoverLoanInstruction,
  type ParsedRepayLoanInstruction,
  type ParsedRequestLoanInstruction,
  type ParsedReturnReclaimedSolInstruction,
  type ParsedSetDeployedProgramInstruction,
  type ParsedSetPausedInstruction,
  type ParsedUpdateConfigInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const SOLIGNITION_PROGRAM_ADDRESS =
  '4dWBvsjopo5Z145Xmse3Lx41G1GKpMyWMLc6p4a52T4N' as Address<'4dWBvsjopo5Z145Xmse3Lx41G1GKpMyWMLc6p4a52T4N'>;

export enum SolignitionAccount {
  DepositorRecord,
  Loan,
  ProtocolConfig,
}

export function identifySolignitionAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolignitionAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([120, 180, 8, 71, 198, 212, 93, 187])
      ),
      0
    )
  ) {
    return SolignitionAccount.DepositorRecord;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 195, 70, 117, 165, 227, 182, 1])
      ),
      0
    )
  ) {
    return SolignitionAccount.Loan;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 91, 250, 28, 152, 179, 215, 209])
      ),
      0
    )
  ) {
    return SolignitionAccount.ProtocolConfig;
  }
  throw new Error(
    'The provided account could not be identified as a solignition account.'
  );
}

export enum SolignitionInstruction {
  Deposit,
  Initialize,
  ReclaimProgramAuthority,
  RecoverLoan,
  RepayLoan,
  RequestLoan,
  ReturnReclaimedSol,
  SetDeployedProgram,
  SetPaused,
  UpdateConfig,
  Withdraw,
}

export function identifySolignitionInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolignitionInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return SolignitionInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return SolignitionInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 60, 162, 122, 3, 250, 57, 139])
      ),
      0
    )
  ) {
    return SolignitionInstruction.ReclaimProgramAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([16, 58, 190, 149, 240, 136, 240, 85])
      ),
      0
    )
  ) {
    return SolignitionInstruction.RecoverLoan;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 93, 144, 77, 61, 17, 137, 54])
      ),
      0
    )
  ) {
    return SolignitionInstruction.RepayLoan;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([120, 2, 7, 7, 1, 219, 235, 187])
      ),
      0
    )
  ) {
    return SolignitionInstruction.RequestLoan;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 56, 188, 60, 115, 212, 233, 113])
      ),
      0
    )
  ) {
    return SolignitionInstruction.ReturnReclaimedSol;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 130, 250, 99, 100, 127, 91, 77])
      ),
      0
    )
  ) {
    return SolignitionInstruction.SetDeployedProgram;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 60, 125, 192, 176, 225, 166, 218])
      ),
      0
    )
  ) {
    return SolignitionInstruction.SetPaused;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 158, 252, 191, 10, 83, 219, 99])
      ),
      0
    )
  ) {
    return SolignitionInstruction.UpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return SolignitionInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a solignition instruction.'
  );
}

export type ParsedSolignitionInstruction<
  TProgram extends string = '4dWBvsjopo5Z145Xmse3Lx41G1GKpMyWMLc6p4a52T4N',
> =
  | ({
      instructionType: SolignitionInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.ReclaimProgramAuthority;
    } & ParsedReclaimProgramAuthorityInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.RecoverLoan;
    } & ParsedRecoverLoanInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.RepayLoan;
    } & ParsedRepayLoanInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.RequestLoan;
    } & ParsedRequestLoanInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.ReturnReclaimedSol;
    } & ParsedReturnReclaimedSolInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.SetDeployedProgram;
    } & ParsedSetDeployedProgramInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.SetPaused;
    } & ParsedSetPausedInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.UpdateConfig;
    } & ParsedUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: SolignitionInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
