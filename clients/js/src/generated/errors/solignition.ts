/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { SOLIGNITION_PROGRAM_ADDRESS } from '../programs';

/** ProtocolPaused: Protocol is currently paused */
export const SOLIGNITION_ERROR__PROTOCOL_PAUSED = 0x1770; // 6000
/** InvalidAmount: Invalid amount provided */
export const SOLIGNITION_ERROR__INVALID_AMOUNT = 0x1771; // 6001
/** InsufficientBalance: Insufficient balance */
export const SOLIGNITION_ERROR__INSUFFICIENT_BALANCE = 0x1772; // 6002
/** InsufficientLiquidity: Insufficient liquidity in vault */
export const SOLIGNITION_ERROR__INSUFFICIENT_LIQUIDITY = 0x1773; // 6003
/** InvalidDuration: Invalid duration */
export const SOLIGNITION_ERROR__INVALID_DURATION = 0x1774; // 6004
/** InvalidInterestRate: Invalid interest rate */
export const SOLIGNITION_ERROR__INVALID_INTEREST_RATE = 0x1775; // 6005
/** InvalidAdminFee: Invalid admin fee */
export const SOLIGNITION_ERROR__INVALID_ADMIN_FEE = 0x1776; // 6006
/** LoanNotActive: Loan is not active */
export const SOLIGNITION_ERROR__LOAN_NOT_ACTIVE = 0x1777; // 6007
/** UnauthorizedBorrower: Unauthorized borrower */
export const SOLIGNITION_ERROR__UNAUTHORIZED_BORROWER = 0x1778; // 6008
/** LoanNotExpired: Loan has not expired yet */
export const SOLIGNITION_ERROR__LOAN_NOT_EXPIRED = 0x1779; // 6009
/** LoanNotRecovered: Loan has not been recovered */
export const SOLIGNITION_ERROR__LOAN_NOT_RECOVERED = 0x177a; // 6010
/** Unauthorized: Unauthorized action */
export const SOLIGNITION_ERROR__UNAUTHORIZED = 0x177b; // 6011
/** InvalidParameter: Invalid parameter */
export const SOLIGNITION_ERROR__INVALID_PARAMETER = 0x177c; // 6012
/** UnauthorizedDepositor: Unauthorized depositor */
export const SOLIGNITION_ERROR__UNAUTHORIZED_DEPOSITOR = 0x177d; // 6013
/** InvalidLoanId: Invalid loan ID */
export const SOLIGNITION_ERROR__INVALID_LOAN_ID = 0x177e; // 6014
/** ProgramAlreadySet: Program already set for this loan */
export const SOLIGNITION_ERROR__PROGRAM_ALREADY_SET = 0x177f; // 6015
/** InvalidProgram: Invalid program pubkey */
export const SOLIGNITION_ERROR__INVALID_PROGRAM = 0x1780; // 6016

export type SolignitionError =
  | typeof SOLIGNITION_ERROR__INSUFFICIENT_BALANCE
  | typeof SOLIGNITION_ERROR__INSUFFICIENT_LIQUIDITY
  | typeof SOLIGNITION_ERROR__INVALID_ADMIN_FEE
  | typeof SOLIGNITION_ERROR__INVALID_AMOUNT
  | typeof SOLIGNITION_ERROR__INVALID_DURATION
  | typeof SOLIGNITION_ERROR__INVALID_INTEREST_RATE
  | typeof SOLIGNITION_ERROR__INVALID_LOAN_ID
  | typeof SOLIGNITION_ERROR__INVALID_PARAMETER
  | typeof SOLIGNITION_ERROR__INVALID_PROGRAM
  | typeof SOLIGNITION_ERROR__LOAN_NOT_ACTIVE
  | typeof SOLIGNITION_ERROR__LOAN_NOT_EXPIRED
  | typeof SOLIGNITION_ERROR__LOAN_NOT_RECOVERED
  | typeof SOLIGNITION_ERROR__PROGRAM_ALREADY_SET
  | typeof SOLIGNITION_ERROR__PROTOCOL_PAUSED
  | typeof SOLIGNITION_ERROR__UNAUTHORIZED
  | typeof SOLIGNITION_ERROR__UNAUTHORIZED_BORROWER
  | typeof SOLIGNITION_ERROR__UNAUTHORIZED_DEPOSITOR;

let solignitionErrorMessages: Record<SolignitionError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  solignitionErrorMessages = {
    [SOLIGNITION_ERROR__INSUFFICIENT_BALANCE]: `Insufficient balance`,
    [SOLIGNITION_ERROR__INSUFFICIENT_LIQUIDITY]: `Insufficient liquidity in vault`,
    [SOLIGNITION_ERROR__INVALID_ADMIN_FEE]: `Invalid admin fee`,
    [SOLIGNITION_ERROR__INVALID_AMOUNT]: `Invalid amount provided`,
    [SOLIGNITION_ERROR__INVALID_DURATION]: `Invalid duration`,
    [SOLIGNITION_ERROR__INVALID_INTEREST_RATE]: `Invalid interest rate`,
    [SOLIGNITION_ERROR__INVALID_LOAN_ID]: `Invalid loan ID`,
    [SOLIGNITION_ERROR__INVALID_PARAMETER]: `Invalid parameter`,
    [SOLIGNITION_ERROR__INVALID_PROGRAM]: `Invalid program pubkey`,
    [SOLIGNITION_ERROR__LOAN_NOT_ACTIVE]: `Loan is not active`,
    [SOLIGNITION_ERROR__LOAN_NOT_EXPIRED]: `Loan has not expired yet`,
    [SOLIGNITION_ERROR__LOAN_NOT_RECOVERED]: `Loan has not been recovered`,
    [SOLIGNITION_ERROR__PROGRAM_ALREADY_SET]: `Program already set for this loan`,
    [SOLIGNITION_ERROR__PROTOCOL_PAUSED]: `Protocol is currently paused`,
    [SOLIGNITION_ERROR__UNAUTHORIZED]: `Unauthorized action`,
    [SOLIGNITION_ERROR__UNAUTHORIZED_BORROWER]: `Unauthorized borrower`,
    [SOLIGNITION_ERROR__UNAUTHORIZED_DEPOSITOR]: `Unauthorized depositor`,
  };
}

export function getSolignitionErrorMessage(code: SolignitionError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (solignitionErrorMessages as Record<SolignitionError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSolignitionError<TProgramErrorCode extends SolignitionError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SOLIGNITION_PROGRAM_ADDRESS,
    code
  );
}
